package jobmonitorview

import (
	"github.com/google/uuid"
	"github.com/uszebr/loadmonitor/inner/domain/collector"
	"github.com/uszebr/loadmonitor/inner/domain/job"
	"github.com/uszebr/loadmonitor/inner/util/uuidutil"
	"github.com/uszebr/loadmonitor/inner/view/baseview"
	"strconv"
)

templ JobMonitorPage() {
	@baseview.BasePage(baseview.BaseParam{Title: "Jobs Monitor - Jobs collector data", HTMX: true}) {
		<div class="page-inner">
			<div class="page-header">
				<h4 class="page-title">Jobs Monitor</h4>
			</div>
			<div class="page-category">Finished Jobs Data</div>
			<!-- Card -->
			<h3 class="fw-bold mb-3">Card</h3>
			<div class="row">
				<div class="col-sm-6 col-md-3">
					<div class="card card-stats card-primary card-round">
						<div class="card-body">
							<div class="row">
								<div class="col-5">
									<div class="icon-big text-center">
										<i class="far fa-check-circle"></i>
									</div>
								</div>
								<div class="col-7 col-stats">
									<div class="numbers">
										<p class="card-category">Jobs Completed</p>
										<div class="card-title h4" id="jobs-quantity"></div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-sm-6 col-md-3">
					<div class="card card-stats card-success card-round">
						<div class="card-body">
							<div class="row">
								<div class="col-5">
									<div class="icon-big text-center">
										<i class="fas fa-luggage-cart"></i>
									</div>
								</div>
								<div class="col-7 col-stats">
									<div class="numbers">
										<p class="card-category">Total Complexity</p>
										<div id="total-complexity" class="card-title h4"></div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div hx-post="/jobmonitor" hx-trigger="every 1s"></div>
			<div class="row">
				<div class="col-md-12">
					<div class="card">
						<table id="job-updates" class="table">
							<thead>
								<tr>
									<th scope="col">#</th>
									<th scope="col">Complexity</th>
									<th scope="col">Memory</th>
									<th scope="col">Duration</th>
								</tr>
							</thead>
							<tbody id="table-jobs"></tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	}
}

templ JobMonitorPost(jobCollector *collector.Collector) {
	<tbody id="job-updates" hx-swap-oob="innerHTML:#job-updates tbody">
		@jobsBlock(jobCollector.GetLastJobs())
	</tbody>
	<div id="jobs-quantity" hx-swap-oob="innerHTML">{ jobCollector.CountSt() }</div>
	<div id="total-complexity" hx-swap-oob="innerHTML">{ jobCollector.SumOfComplexitySt() }</div>
}

templ jobsBlock(jobs []job.JobI) {
	for i := len(jobs) - 1; i >= 0; i-- {
		@jobEntity(jobs[i])
	}
}

templ jobEntity(job job.JobI) {
	//<p><i class="fas fa-star text-info"></i>Complexity[{ strconv.Itoa(int(job.ComplexityInt())) }] Memory[{ strconv.Itoa(int(job.MemoryLoadInt())) }]Status: { string(job.Status()) } Duration: { job.JobDuration().String() }</p>
	<tr>
		<td>
			@coloredIdPrefix(job.Id())
		</td>
		<td>{ strconv.Itoa(int(job.ComplexityInt())) }</td>
		<td>{ strconv.Itoa(int(job.MemoryLoadInt())) }</td>
		<td>{ job.JobDuration().String() }</td>
	</tr>
}

templ coloredIdPrefix(u uuid.UUID) {
	<p><i class={ "fas fa-microchip",red(u) }></i><strong>{ uuidutil.First4Symbols(u) }</strong></p>
}

css red(u uuid.UUID) {
	color: { uuidutil.ColorFromUUID(u) };
}
