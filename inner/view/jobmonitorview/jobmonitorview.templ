package jobmonitorview

import (
	"github.com/google/uuid"
	"github.com/uszebr/loadmonitor/inner/domain/collector"
	"github.com/uszebr/loadmonitor/inner/domain/job"
	"github.com/uszebr/loadmonitor/inner/util/uuidutil"
	"github.com/uszebr/loadmonitor/inner/view/baseview"
	"strconv"
)

templ JobMonitorPage(jobCollector *collector.Collector) {
	@baseview.BasePage(baseview.BaseParam{Title: "Jobs Monitor - Jobs collector data", HTMX: true}) {
		<div class="page-inner">
			<div class="page-header">
				<h4 class="page-title">Jobs Monitor</h4>
			</div>
			<div class="page-category">Finished Jobs Data</div>
			<div class="row">
				<div class="col-md-12">
					<div class="card">
						<div class="card-body">
							<div id="job-updates" hx-post="/jobmonitor" hx-trigger="every 1s"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ JobMonitorPost(jobCollector *collector.Collector) {
	<h5>Jobs Done: { jobCollector.CountSt() } Total Complexity: { jobCollector.SumOfComplexitySt() }</h5>
	<table class="table">
		<thead>
			<tr>
				<th scope="col">#</th>
				<th scope="col">Complexity</th>
				<th scope="col">Memory</th>
				<th scope="col">Duration</th>
			</tr>
		</thead>
		<tbody>
			@jobsBlock(jobCollector.GetLastJobs())
		</tbody>
	</table>
}

templ jobsBlock(jobs []job.JobI) {
	for i := len(jobs) - 1; i >= 0; i-- {
		@jobEntity(jobs[i])
	}
}

templ jobEntity(job job.JobI) {
	//<p><i class="fas fa-star text-info"></i>Complexity[{ strconv.Itoa(int(job.ComplexityInt())) }] Memory[{ strconv.Itoa(int(job.MemoryLoadInt())) }]Status: { string(job.Status()) } Duration: { job.JobDuration().String() }</p>
	<tr>
		<td>
			@coloredIdPrefix(job.Id())
		</td>
		<td>{ strconv.Itoa(int(job.ComplexityInt())) }</td>
		<td>{ strconv.Itoa(int(job.MemoryLoadInt())) }</td>
		<td>{ job.JobDuration().String() }</td>
	</tr>
}

templ coloredIdPrefix(u uuid.UUID) {
	<p ><i class={ "fas fa-microchip",red(u) }></i><strong>{ uuidutil.First4Symbols(u) }</strong></p>
}

css red(u uuid.UUID) {
	color: { uuidutil.ColorFromUUID(u) };
}
